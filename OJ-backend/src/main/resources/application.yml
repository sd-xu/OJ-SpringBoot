server:
  port: 8088

mysql:
  # host: 127.0.0.1
  host: 172.27.95.38
  port: 3309

spring:
  application:
    name: user-service

  # 数据源配置
  datasource:
    username: root
#    password: D233
    password: 123456
    url: 172.27.95.38
    # url: jdbc:mysql://localhost:3306/oj_database?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&allowMultiQueries=true&rewriteBatchedStatements=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource

    #Spring Boot 默认是不注入这些属性值的，需要自己绑定
    #druid 数据源专有配置
    druid:
      initial-size: 5   # 初始化大小
      min-idle: 5       # 最小空闲连接个数
      max-active: 20    # 最大连接个数
      max-wait: 60000   # 配置获取连接等待超时的时间
      time-between-eviction-runs-millis: 60000    # 配置间隔多久才进行一次监测，监测需要关闭的空闲连接，单位时毫秒
      min-evictable-idle-time-millis: 60000       # 配置一个连接在池中最小生存的时间
      validation-query: select 1                  # 用来监测连接是否有效的sql，要求是一个查询语句
      test-while-idle: true            # 建议配置为true，不影响性能，并且保证安全性。如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-on-borrow: false            # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false            # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      pool-prepared-statements: true   # 打开PSCache，并且指定每个连接上PSCache的大小
      max-open-prepared-statements: 20
      filters: stat,wall,log4j   # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙，此处是filter修改的地方
      max-pool-prepared-statement-per-connection-size: 20
      use-global-data-source-stat: true
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500

  thymeleaf:
    prefix: classpath:/templates
    encoding: UTF-8

  data:
    redis:
      # database: 0
      host: 172.27.95.38
      port: 6679
      # password:
      timeout: 60000 # 0
      client-type: jedis
      jedis:
        pool:
          min-idle: 0    # 连接池中的最小空闲连接
          max-idle: 10   # 连接池中的最大空闲连接
          max-active: 20 # 连接池最大连接数（使用负值表示没有限制）
          max-wait: -1   # 连接池最大阻塞等待时间（使用负值表示没有限制）
  web:
    resources:
      static-locations: file:D://static/image/

mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.coding.oj.pojo.entity

# 配置myBatisPlus
#mybatis-plus:
#  mapper-locations: classpath:mapper/*.xml
#  type-aliases-package: com.coding.oj.pojo.entity # 配置指定实体类文件路径, 在xml文件中使用时扫描路径内容
#  configuration:
#    map-underscore-to-camel-case: true
#    cache-enabled: true
#  # 关闭打印 mybatis-plus 的 LOGO
#  global-config:
#    banner: false

# 分页插件
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql

# 文件上传
file:
  staticAccessPath: /image/**
  uploadFolder: D://static/image/

spring.mvc.static-path-pattern: /image/**
# 测试
# curl -F "file=@C:/Users/19056/Desktop/2.jpeg" -F "username=张三" "http://localhost:8088/postUserImage"


#curl -X POST -H "Content-Type: application/json" -d @test/test.json "http://localhost:8088/submit-problem-judge"

#docker镜像常用命令
#docker images      显示当前目录下的所有镜像
#docker run -itd --rm --privileged --shm-size=256m -p 5050:5050 oj/image:oj /opt/executorserver     启动镜像中的沙盒程序
#docker ps -a       查看所有容器的状态
#docker exec -it d2cab347eff9 /bin/bash         docker exec表示在运行的容器xxxxx中执行命令，-it和/bin/bash表示进入该容器的命令行交互模式
