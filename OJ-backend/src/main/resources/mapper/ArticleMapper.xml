<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coding.oj.mapper.ArticleMapper">
  <resultMap id="BaseResultMap" type="com.coding.oj.pojo.entity.Article">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="uid" jdbcType="INTEGER" property="uid" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="sort" jdbcType="VARCHAR" property="sort" />
    <result column="label" jdbcType="VARCHAR" property="label" />
    <result column="image_url" jdbcType="VARCHAR" property="imageUrl" />
    <result column="like_count" jdbcType="BIGINT" property="likeCount" />
    <result column="comment_count" jdbcType="BIGINT" property="commentCount" />
    <result column="star_count" jdbcType="BIGINT" property="starCount" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from article
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.coding.oj.pojo.entity.Article">
    insert into article (id, uid, title, 
      content, sort, label, 
      image_url, like_count, comment_count,
      star_count)
    values (#{id,jdbcType=BIGINT}, #{uid,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, 
      #{content,jdbcType=VARCHAR}, #{sort,jdbcType=VARCHAR}, #{label,jdbcType=VARCHAR}, 
      #{imageUrl,jdbcType=VARCHAR}, #{likeCount,jdbcType=BIGINT}, #{commentCount,jdbcType=BIGINT},
      #{starCount,jdbcType=BIGINT})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.coding.oj.pojo.entity.Article">
    update article
    set uid = #{uid,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      sort = #{sort,jdbcType=VARCHAR},
      label = #{label,jdbcType=VARCHAR},
      image_url = #{imageUrl,jdbcType=VARCHAR},
      like_count = #{likeCount,jdbcType=BIGINT},
      comment_count = #{commentCount,jdbcType=BIGINT},
      star_count = #{star_count,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, uid, title, content, sort, label, image_url, like_count, comment_count,
    star_count
    from article
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, uid, title, content, sort, label, image_url, like_count, comment_count,
    star_count, gmt_create, gmt_modified
    from article
  </select>

  <select id="selectSort" resultType="String">
    select distinct (sort)
    from article
  </select>

  <select id="selectSortPercent" resultType="org.springframework.data.util.Pair">
    SELECT sort,CONCAT(ROUND(a.cnt/b.sum *100,2),'','%')
    FROM
      (
        select sort,
               COUNT(sort) AS cnt
        FROM
          article
        GROUP BY
          sort
        ORDER BY
          cnt DESC
      )AS a,
      (
        SELECT COUNT(*) AS sum
        FROM
          article
      ) AS b;
  </select>

  <select id="selectRecommendation" resultType="com.coding.oj.pojo.entity.Article">
    SELECT * FROM article order by like_count desc, comment_count desc;
  </select>

  <select id="selectArticleStar" resultMap="BaseResultMap" parameterType="map">
    SELECT a.* FROM article a,star s
    where a.uid = s.uid and a.id = #{id} and a.uid = #{uid};
  </select>

  <select id="selectArticleLike" resultMap="BaseResultMap" parameterType="map">
    SELECT a.* FROM article a,like_article l
    where a.uid = l.uid and a.id = #{id} and a.uid = #{uid};
  </select>
</mapper>